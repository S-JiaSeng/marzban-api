/*
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ProxyHost
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-26T06:54:11.907891916Z[GMT]")

public class ProxyHost {
  @SerializedName("remark")
  private String remark = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("sni")
  private String sni = null;

  @SerializedName("host")
  private String host = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("security")
  private AllOfProxyHostSecurity security = null;

  @SerializedName("alpn")
  private AllOfProxyHostAlpn alpn = null;

  @SerializedName("fingerprint")
  private AllOfProxyHostFingerprint fingerprint = null;

  @SerializedName("allowinsecure")
  private Boolean allowinsecure = null;

  @SerializedName("is_disabled")
  private Boolean isDisabled = null;

  @SerializedName("mux_enable")
  private Boolean muxEnable = null;

  @SerializedName("fragment_setting")
  private String fragmentSetting = null;

  @SerializedName("noise_setting")
  private String noiseSetting = null;

  @SerializedName("random_user_agent")
  private Boolean randomUserAgent = null;

  public ProxyHost remark(String remark) {
    this.remark = remark;
    return this;
  }

   /**
   * Get remark
   * @return remark
  **/
  @Schema(required = true, description = "")
  public String getRemark() {
    return remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }

  public ProxyHost address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(required = true, description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public ProxyHost port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public ProxyHost sni(String sni) {
    this.sni = sni;
    return this;
  }

   /**
   * Get sni
   * @return sni
  **/
  @Schema(description = "")
  public String getSni() {
    return sni;
  }

  public void setSni(String sni) {
    this.sni = sni;
  }

  public ProxyHost host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public ProxyHost path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public ProxyHost security(AllOfProxyHostSecurity security) {
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @Schema(description = "")
  public AllOfProxyHostSecurity getSecurity() {
    return security;
  }

  public void setSecurity(AllOfProxyHostSecurity security) {
    this.security = security;
  }

  public ProxyHost alpn(AllOfProxyHostAlpn alpn) {
    this.alpn = alpn;
    return this;
  }

   /**
   * Get alpn
   * @return alpn
  **/
  @Schema(description = "")
  public AllOfProxyHostAlpn getAlpn() {
    return alpn;
  }

  public void setAlpn(AllOfProxyHostAlpn alpn) {
    this.alpn = alpn;
  }

  public ProxyHost fingerprint(AllOfProxyHostFingerprint fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Get fingerprint
   * @return fingerprint
  **/
  @Schema(description = "")
  public AllOfProxyHostFingerprint getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(AllOfProxyHostFingerprint fingerprint) {
    this.fingerprint = fingerprint;
  }

  public ProxyHost allowinsecure(Boolean allowinsecure) {
    this.allowinsecure = allowinsecure;
    return this;
  }

   /**
   * Get allowinsecure
   * @return allowinsecure
  **/
  @Schema(description = "")
  public Boolean isAllowinsecure() {
    return allowinsecure;
  }

  public void setAllowinsecure(Boolean allowinsecure) {
    this.allowinsecure = allowinsecure;
  }

  public ProxyHost isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * Get isDisabled
   * @return isDisabled
  **/
  @Schema(description = "")
  public Boolean isIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  public ProxyHost muxEnable(Boolean muxEnable) {
    this.muxEnable = muxEnable;
    return this;
  }

   /**
   * Get muxEnable
   * @return muxEnable
  **/
  @Schema(description = "")
  public Boolean isMuxEnable() {
    return muxEnable;
  }

  public void setMuxEnable(Boolean muxEnable) {
    this.muxEnable = muxEnable;
  }

  public ProxyHost fragmentSetting(String fragmentSetting) {
    this.fragmentSetting = fragmentSetting;
    return this;
  }

   /**
   * Get fragmentSetting
   * @return fragmentSetting
  **/
  @Schema(description = "")
  public String getFragmentSetting() {
    return fragmentSetting;
  }

  public void setFragmentSetting(String fragmentSetting) {
    this.fragmentSetting = fragmentSetting;
  }

  public ProxyHost noiseSetting(String noiseSetting) {
    this.noiseSetting = noiseSetting;
    return this;
  }

   /**
   * Get noiseSetting
   * @return noiseSetting
  **/
  @Schema(description = "")
  public String getNoiseSetting() {
    return noiseSetting;
  }

  public void setNoiseSetting(String noiseSetting) {
    this.noiseSetting = noiseSetting;
  }

  public ProxyHost randomUserAgent(Boolean randomUserAgent) {
    this.randomUserAgent = randomUserAgent;
    return this;
  }

   /**
   * Get randomUserAgent
   * @return randomUserAgent
  **/
  @Schema(description = "")
  public Boolean isRandomUserAgent() {
    return randomUserAgent;
  }

  public void setRandomUserAgent(Boolean randomUserAgent) {
    this.randomUserAgent = randomUserAgent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyHost proxyHost = (ProxyHost) o;
    return Objects.equals(this.remark, proxyHost.remark) &&
        Objects.equals(this.address, proxyHost.address) &&
        Objects.equals(this.port, proxyHost.port) &&
        Objects.equals(this.sni, proxyHost.sni) &&
        Objects.equals(this.host, proxyHost.host) &&
        Objects.equals(this.path, proxyHost.path) &&
        Objects.equals(this.security, proxyHost.security) &&
        Objects.equals(this.alpn, proxyHost.alpn) &&
        Objects.equals(this.fingerprint, proxyHost.fingerprint) &&
        Objects.equals(this.allowinsecure, proxyHost.allowinsecure) &&
        Objects.equals(this.isDisabled, proxyHost.isDisabled) &&
        Objects.equals(this.muxEnable, proxyHost.muxEnable) &&
        Objects.equals(this.fragmentSetting, proxyHost.fragmentSetting) &&
        Objects.equals(this.noiseSetting, proxyHost.noiseSetting) &&
        Objects.equals(this.randomUserAgent, proxyHost.randomUserAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remark, address, port, sni, host, path, security, alpn, fingerprint, allowinsecure, isDisabled, muxEnable, fragmentSetting, noiseSetting, randomUserAgent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyHost {\n");
    
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    sni: ").append(toIndentedString(sni)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    alpn: ").append(toIndentedString(alpn)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    allowinsecure: ").append(toIndentedString(allowinsecure)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    muxEnable: ").append(toIndentedString(muxEnable)).append("\n");
    sb.append("    fragmentSetting: ").append(toIndentedString(fragmentSetting)).append("\n");
    sb.append("    noiseSetting: ").append(toIndentedString(noiseSetting)).append("\n");
    sb.append("    randomUserAgent: ").append(toIndentedString(randomUserAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
