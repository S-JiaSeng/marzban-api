/*
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * NodeCreate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-26T06:54:11.907891916Z[GMT]")

public class NodeCreate {
  @SerializedName("name")
  private String name = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("port")
  private Integer port = 62050;

  @SerializedName("api_port")
  private Integer apiPort = 62051;

  @SerializedName("usage_coefficient")
  private BigDecimal usageCoefficient = new BigDecimal(1);

  @SerializedName("add_as_new_host")
  private Boolean addAsNewHost = true;

  public NodeCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NodeCreate address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(required = true, description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public NodeCreate port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public NodeCreate apiPort(Integer apiPort) {
    this.apiPort = apiPort;
    return this;
  }

   /**
   * Get apiPort
   * @return apiPort
  **/
  @Schema(description = "")
  public Integer getApiPort() {
    return apiPort;
  }

  public void setApiPort(Integer apiPort) {
    this.apiPort = apiPort;
  }

  public NodeCreate usageCoefficient(BigDecimal usageCoefficient) {
    this.usageCoefficient = usageCoefficient;
    return this;
  }

   /**
   * Get usageCoefficient
   * @return usageCoefficient
  **/
  @Schema(description = "")
  public BigDecimal getUsageCoefficient() {
    return usageCoefficient;
  }

  public void setUsageCoefficient(BigDecimal usageCoefficient) {
    this.usageCoefficient = usageCoefficient;
  }

  public NodeCreate addAsNewHost(Boolean addAsNewHost) {
    this.addAsNewHost = addAsNewHost;
    return this;
  }

   /**
   * Get addAsNewHost
   * @return addAsNewHost
  **/
  @Schema(description = "")
  public Boolean isAddAsNewHost() {
    return addAsNewHost;
  }

  public void setAddAsNewHost(Boolean addAsNewHost) {
    this.addAsNewHost = addAsNewHost;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeCreate nodeCreate = (NodeCreate) o;
    return Objects.equals(this.name, nodeCreate.name) &&
        Objects.equals(this.address, nodeCreate.address) &&
        Objects.equals(this.port, nodeCreate.port) &&
        Objects.equals(this.apiPort, nodeCreate.apiPort) &&
        Objects.equals(this.usageCoefficient, nodeCreate.usageCoefficient) &&
        Objects.equals(this.addAsNewHost, nodeCreate.addAsNewHost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, port, apiPort, usageCoefficient, addAsNewHost);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeCreate {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    apiPort: ").append(toIndentedString(apiPort)).append("\n");
    sb.append("    usageCoefficient: ").append(toIndentedString(usageCoefficient)).append("\n");
    sb.append("    addAsNewHost: ").append(toIndentedString(addAsNewHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
