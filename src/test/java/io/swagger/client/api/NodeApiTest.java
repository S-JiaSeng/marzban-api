/*
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.HTTPValidationError;
import io.swagger.client.model.NodeCreate;
import io.swagger.client.model.NodeModify;
import io.swagger.client.model.NodeResponse;
import io.swagger.client.model.NodeSettings;
import io.swagger.client.model.NodesUsageResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for NodeApi
 */
@Ignore
public class NodeApiTest {

    private final NodeApi api = new NodeApi();

    /**
     * Add Node
     *
     * Add a new node to the database and optionally add it as a host.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addNodeTest() throws Exception {
        NodeCreate body = null;
        NodeResponse response = api.addNode(body);

        // TODO: test validations
    }
    /**
     * Get Node
     *
     * Retrieve details of a specific node by its ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws Exception {
        Integer nodeId = null;
        NodeResponse response = api.getNode(nodeId);

        // TODO: test validations
    }
    /**
     * Get Node Settings
     *
     * Retrieve the current node settings, including TLS certificate.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodeSettingsTest() throws Exception {
        NodeSettings response = api.getNodeSettings();

        // TODO: test validations
    }
    /**
     * Get Nodes
     *
     * Retrieve a list of all nodes. Accessible only to sudo admins.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodesTest() throws Exception {
        List<NodeResponse> response = api.getNodes();

        // TODO: test validations
    }
    /**
     * Get Usage
     *
     * Retrieve usage statistics for nodes within a specified date range.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsageTest() throws Exception {
        String start = null;
        String end = null;
        NodesUsageResponse response = api.getUsage(start, end);

        // TODO: test validations
    }
    /**
     * Modify Node
     *
     * Update a node&#x27;s details. Only accessible to sudo admins.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyNodeTest() throws Exception {
        NodeModify body = null;
        Integer nodeId = null;
        NodeResponse response = api.modifyNode(body, nodeId);

        // TODO: test validations
    }
    /**
     * Reconnect Node
     *
     * Trigger a reconnection for the specified node. Only accessible to sudo admins.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reconnectNodeTest() throws Exception {
        Integer nodeId = null;
        Object response = api.reconnectNode(nodeId);

        // TODO: test validations
    }
    /**
     * Remove Node
     *
     * Delete a node and remove it from xray in the background.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeNodeTest() throws Exception {
        Integer nodeId = null;
        Object response = api.removeNode(nodeId);

        // TODO: test validations
    }
}
