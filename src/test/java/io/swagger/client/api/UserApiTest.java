/*
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.HTTPValidationError;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.UserCreate;
import io.swagger.client.model.UserModify;
import io.swagger.client.model.UserResponse;
import io.swagger.client.model.UserStatus;
import io.swagger.client.model.UserUsagesResponse;
import io.swagger.client.model.UsersResponse;
import io.swagger.client.model.UsersUsagesResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Add User
     *
     * Add a new user  - **username**: 3 to 32 characters, can include a-z, 0-9, and underscores. - **status**: User&#x27;s status, defaults to &#x60;active&#x60;. Special rules if &#x60;on_hold&#x60;. - **expire**: UTC timestamp for account expiration. Use &#x60;0&#x60; for unlimited. - **data_limit**: Max data usage in bytes (e.g., &#x60;1073741824&#x60; for 1GB). &#x60;0&#x60; means unlimited. - **data_limit_reset_strategy**: Defines how/if data limit resets. &#x60;no_reset&#x60; means it never resets. - **proxies**: Dictionary of protocol settings (e.g., &#x60;vmess&#x60;, &#x60;vless&#x60;). - **inbounds**: Dictionary of protocol tags to specify inbound connections. - **note**: Optional text field for additional user information or notes. - **on_hold_timeout**: UTC timestamp when &#x60;on_hold&#x60; status should start or end. - **on_hold_expire_duration**: Duration (in seconds) for how long the user should stay in &#x60;on_hold&#x60; status.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws Exception {
        UserCreate body = null;
        UserResponse response = api.addUser(body);

        // TODO: test validations
    }
    /**
     * Delete Expired Users
     *
     * Delete users who have expired within the specified date range.  - **expired_after** UTC datetime (optional) - **expired_before** UTC datetime (optional) - At least one of expired_after or expired_before must be provided
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteExpiredUsersTest() throws Exception {
        OffsetDateTime expiredAfter = null;
        OffsetDateTime expiredBefore = null;
        List<String> response = api.deleteExpiredUsers(expiredAfter, expiredBefore);

        // TODO: test validations
    }
    /**
     * Get Expired Users
     *
     * Get users who have expired within the specified date range.  - **expired_after** UTC datetime (optional) - **expired_before** UTC datetime (optional) - At least one of expired_after or expired_before must be provided for filtering - If both are omitted, returns all expired users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getExpiredUsersTest() throws Exception {
        OffsetDateTime expiredAfter = null;
        OffsetDateTime expiredBefore = null;
        List<String> response = api.getExpiredUsers(expiredAfter, expiredBefore);

        // TODO: test validations
    }
    /**
     * Get User
     *
     * Get user information
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws Exception {
        String username = null;
        UserResponse response = api.getUser(username);

        // TODO: test validations
    }
    /**
     * Get User Usage
     *
     * Get users usage
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserUsageTest() throws Exception {
        String username = null;
        String start = null;
        String end = null;
        UserUsagesResponse response = api.getUserUsage(username, start, end);

        // TODO: test validations
    }
    /**
     * Get Users
     *
     * Get all users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws Exception {
        Integer offset = null;
        Integer limit = null;
        List<String> username = null;
        String search = null;
        List<String> admin = null;
        UserStatus status = null;
        String sort = null;
        UsersResponse response = api.getUsers(offset, limit, username, search, admin, status, sort);

        // TODO: test validations
    }
    /**
     * Get Users Usage
     *
     * Get all users usage
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersUsageTest() throws Exception {
        String start = null;
        String end = null;
        List<String> admin = null;
        UsersUsagesResponse response = api.getUsersUsage(start, end, admin);

        // TODO: test validations
    }
    /**
     * Modify User
     *
     * Modify an existing user  - **username**: Cannot be changed. Used to identify the user. - **status**: User&#x27;s new status. Can be &#x27;active&#x27;, &#x27;disabled&#x27;, &#x27;on_hold&#x27;, &#x27;limited&#x27;, or &#x27;expired&#x27;. - **expire**: UTC timestamp for new account expiration. Set to &#x60;0&#x60; for unlimited, &#x60;null&#x60; for no change. - **data_limit**: New max data usage in bytes (e.g., &#x60;1073741824&#x60; for 1GB). Set to &#x60;0&#x60; for unlimited, &#x60;null&#x60; for no change. - **data_limit_reset_strategy**: New strategy for data limit reset. Options include &#x27;daily&#x27;, &#x27;weekly&#x27;, &#x27;monthly&#x27;, or &#x27;no_reset&#x27;. - **proxies**: Dictionary of new protocol settings (e.g., &#x60;vmess&#x60;, &#x60;vless&#x60;). Empty dictionary means no change. - **inbounds**: Dictionary of new protocol tags to specify inbound connections. Empty dictionary means no change. - **note**: New optional text for additional user information or notes. &#x60;null&#x60; means no change. - **on_hold_timeout**: New UTC timestamp for when &#x60;on_hold&#x60; status should start or end. Only applicable if status is changed to &#x27;on_hold&#x27;. - **on_hold_expire_duration**: New duration (in seconds) for how long the user should stay in &#x60;on_hold&#x60; status. Only applicable if status is changed to &#x27;on_hold&#x27;.  Note: Fields set to &#x60;null&#x60; or omitted will not be modified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyUserTest() throws Exception {
        UserModify body = null;
        String username = null;
        UserResponse response = api.modifyUser(body, username);

        // TODO: test validations
    }
    /**
     * Remove User
     *
     * Remove a user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUserTest() throws Exception {
        String username = null;
        Object response = api.removeUser(username);

        // TODO: test validations
    }
    /**
     * Reset User Data Usage
     *
     * Reset user data usage
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resetUserDataUsageTest() throws Exception {
        String username = null;
        UserResponse response = api.resetUserDataUsage(username);

        // TODO: test validations
    }
    /**
     * Reset Users Data Usage
     *
     * Reset all users data usage
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resetUsersDataUsageTest() throws Exception {
        Object response = api.resetUsersDataUsage();

        // TODO: test validations
    }
    /**
     * Revoke User Subscription
     *
     * Revoke users subscription (Subscription link and proxies)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void revokeUserSubscriptionTest() throws Exception {
        String username = null;
        UserResponse response = api.revokeUserSubscription(username);

        // TODO: test validations
    }
    /**
     * Set Owner
     *
     * Set a new owner (admin) for a user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setOwnerTest() throws Exception {
        String username = null;
        String adminUsername = null;
        UserResponse response = api.setOwner(username, adminUsername);

        // TODO: test validations
    }
}
